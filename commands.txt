celery -A qr_backend.celery worker --pool=solo -l INFO
celery -A qr_backend beat -l info -S django
python manage.py dumpdata --natural-foreign --natural-primary -e contenttypes -e auth.Permission --indent 2 > dump.json
docker build --tag qr_celery_django .
docker run -it -p 8000:8000 qr_celery_django

Part#3
docker-compose build
docker-compose run --rm app django-admin startproject core .
docker-compose up
docker exec -it django_container /bin/bash

Part#4
docker-compose run django_app sh -c "django-admin startapp newapp ."
docker exec -it django_app sh

after db changed to production:
sudo systemctl daemon-reload
sudo systemctl restart gunicorn 
sudo systemctl restart nginx

[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/project/qr_backend_v2
ExecStart=/home/ubuntu/project/venv/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          qr_backend.wsgi:application

[Install]
WantedBy=multi-user.target



//nginx
server {
    listen 80;
    server_name 54.91.106.206,ec2-54-91-106-206.compute-1.amazonaws.com;

    location = /favicon.ico { access_log off; log_not_found off; }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}



psql -h ec2-54-91-106-206.compute-1.amazonaws.com -p 5432 -U gokul database-1 -W